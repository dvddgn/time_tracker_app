<% content_for :title, "Dashboard" %>

<div class="p-4 mt-14 bg-white dark:bg-gray-800 border border-gray-200 rounded-lg dark:border-gray-700">
  <!-- Header Section -->
  <div class="mb-6">
    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">Time Tracking Dashboard</h1>
        <p class="text-gray-600 dark:text-gray-400">
          Insights and analytics for your productivity patterns
        </p>
      </div>
      
      <!-- Date Range Filter -->
      <div class="mt-4">
        <!-- Quick Filter Buttons -->
        <div class="mb-3">
          <div class="flex flex-wrap gap-2">
            <button type="button" data-period="this-week" 
                    class="quick-filter-btn px-3 py-2 text-xs font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700 dark:focus:ring-blue-800">
              This Week
            </button>
            <button type="button" data-period="last-week" 
                    class="quick-filter-btn px-3 py-2 text-xs font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700 dark:focus:ring-blue-800">
              Last Week
            </button>
            <button type="button" data-period="this-month" 
                    class="quick-filter-btn px-3 py-2 text-xs font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700 dark:focus:ring-blue-800">
              This Month
            </button>
            <button type="button" data-period="last-month" 
                    class="quick-filter-btn px-3 py-2 text-xs font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700 dark:focus:ring-blue-800">
              Last Month
            </button>
          </div>
        </div>
        
        <div class="flex flex-col space-y-3 sm:flex-row sm:items-center sm:space-y-0 sm:space-x-2">
          <!-- Date Range Group -->
          <div class="flex items-center space-x-2">
            <!-- Start Date Picker -->
            <div class="relative flex-1 min-w-0">
              <div class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
                <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
                </svg>
              </div>
              <input id="start-datepicker" name="start" type="text" 
                     class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block ps-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
                     placeholder="Select start date"
                     value="<%= params[:start_date] || Date.current.beginning_of_week.strftime('%Y-%m-%d') %>">
            </div>
            <span class="text-gray-500 dark:text-gray-400 text-sm flex-shrink-0">to</span>
            <!-- End Date Picker -->
            <div class="relative flex-1 min-w-0">
              <div class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
                <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
                </svg>
              </div>
              <input id="end-datepicker" name="end" type="text" 
                     class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block ps-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
                     placeholder="Select end date"
                     value="<%= params[:end_date] || (Date.current.beginning_of_week + 4.days).strftime('%Y-%m-%d') %>">
            </div>
          </div>
          <!-- Apply Button -->
          <button type="button" id="apply-filter" 
                  class="w-full sm:w-auto px-4 py-2.5 text-sm font-medium text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
            Apply Filter
          </button>
        </div>
      </div>
    </div>
    
    <!-- Summary Cards -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mt-6">
      <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
        <div class="flex items-center">
          <div class="p-2 bg-blue-100 dark:bg-blue-800 rounded-lg">
            <svg class="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-blue-900 dark:text-blue-100">Total Hours</p>
            <p class="text-2xl font-bold text-blue-600 dark:text-blue-400">
              <%= @category_data.sum { |cat| cat[:hours] } %>h
            </p>
          </div>
        </div>
      </div>
      
      <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
        <div class="flex items-center">
          <div class="p-2 bg-green-100 dark:bg-green-800 rounded-lg">
            <svg class="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-green-900 dark:text-green-100">Categories</p>
            <p class="text-2xl font-bold text-green-600 dark:text-green-400">
              <%= @category_data.length %>
            </p>
          </div>
        </div>
      </div>
      
      <div class="bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-4">
        <div class="flex items-center">
          <div class="p-2 bg-purple-100 dark:bg-purple-800 rounded-lg">
            <svg class="w-6 h-6 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-purple-900 dark:text-purple-100">Daily Average</p>
            <p class="text-2xl font-bold text-purple-600 dark:text-purple-400">
              <%= (@daily_data.sum { |day| day[:hours] } / @daily_data.length.to_f).round(1) %>h
            </p>
          </div>
        </div>
      </div>
      
      <div class="bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg p-4">
        <div class="flex items-center">
          <div class="p-2 bg-orange-100 dark:bg-orange-800 rounded-lg">
            <svg class="w-6 h-6 text-orange-600 dark:text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-orange-900 dark:text-orange-100">Total Entries</p>
            <p class="text-2xl font-bold text-orange-600 dark:text-orange-400">
              <%= @daily_data.sum { |day| day[:entries] } %>
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Dashboard Grid -->
  <div class="grid grid-cols-1 xl:grid-cols-2 gap-6">
    
    <!-- Time Distribution Pie Chart -->
    <div class="bg-white rounded-lg dark:bg-gray-800 p-4 md:p-6 border border-gray-200 dark:border-gray-700">
      <div class="flex flex-col space-y-2 sm:flex-row sm:justify-between sm:items-start sm:space-y-0 mb-2">
        <div class="flex-1 min-w-0">
          <h5 class="text-xl font-bold leading-tight text-gray-900 dark:text-white mb-1">Time Distribution</h5>
          <p class="text-sm font-normal text-gray-500 dark:text-gray-400">How you spend your working hours</p>
        </div>
        <div class="flex items-center flex-shrink-0">
          <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-1 rounded-md dark:bg-blue-900 dark:text-blue-300">
            <%= @category_data.sum { |cat| cat[:hours] } %> total hours
          </span>
        </div>
      </div>
      
      <!-- Pie Chart Container -->
      <div id="category-pie-chart" class="py-6 flex justify-center items-center"></div>
      
      <!-- Category Legend -->
      <div class="border-gray-200 border-t dark:border-gray-700 pt-4">
        <div class="h-32 overflow-y-auto custom-scrollbar">
          <div class="space-y-2">
          <% @category_data.each_with_index do |category, index| %>
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <div class="w-3 h-3 rounded-full mr-2" style="background-color: <%= chart_colors[index % chart_colors.length] %>"></div>
                <span class="text-sm text-gray-700 dark:text-gray-300"><%= category[:name] %></span>
              </div>
              <span class="text-sm font-medium text-gray-900 dark:text-white mr-4">
                <%= category[:percentage] %>%
              </span>
            </div>
          <% end %>
          </div>
        </div>
      </div>
    </div>

    <!-- Daily Progress Line Chart -->
    <div class="bg-white rounded-lg dark:bg-gray-800 p-4 md:p-6 border border-gray-200 dark:border-gray-700">
      <div class="flex flex-col space-y-2 sm:flex-row sm:justify-between sm:items-start sm:space-y-0 mb-2">
        <div class="flex-1 min-w-0">
          <h5 class="text-xl font-bold leading-tight text-gray-900 dark:text-white mb-1">Daily Progress</h5>
          <p class="text-sm font-normal text-gray-500 dark:text-gray-400">Hours worked each day this week</p>
        </div>
        <div class="flex items-center flex-shrink-0">
          <span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-1 rounded-md dark:bg-green-900 dark:text-green-300">
            <% avg_hours = (@daily_data.sum { |day| day[:hours] } / @daily_data.length.to_f).round(1) %>
            <%= avg_hours %> average daily hours
          </span>
        </div>
      </div>
      
      <!-- Line Chart Container -->
      <div id="daily-line-chart" class="py-6"></div>
      
      <!-- Weekly Insights -->
      <div class="border-gray-200 border-t dark:border-gray-700 pt-4">
        <div class="h-32 flex items-center">
          <div class="grid grid-cols-2 gap-4 text-center w-full">
            <div>
              <dt class="text-base font-normal text-gray-500 dark:text-gray-400 pb-1">Highest Day</dt>
              <dd class="leading-tight text-lg font-bold text-green-600 dark:text-green-400">
                <% highest_day = @daily_data&.max_by { |day| day[:hours] } %>
                <% if highest_day && highest_day[:hours] > 0 %>
                  <%= highest_day[:day] %> - <%= highest_day[:hours] %>h
                <% else %>
                  No data available
                <% end %>
              </dd>
            </div>
            <div>
              <dt class="text-base font-normal text-gray-500 dark:text-gray-400 pb-1">Lowest Day</dt>
              <dd class="leading-tight text-lg font-bold text-blue-600 dark:text-blue-400">
                <% lowest_day = @daily_data&.min_by { |day| day[:hours] } %>
                <% if lowest_day && lowest_day[:hours] > 0 %>
                  <%= lowest_day[:day] %> - <%= lowest_day[:hours] %>h
                <% else %>
                  No data available
                <% end %>
              </dd>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Category Overview Column Chart -->
    <div class="bg-white rounded-lg dark:bg-gray-800 p-4 md:p-6 border border-gray-200 dark:border-gray-700">
      <div class="flex flex-col space-y-2 sm:flex-row sm:justify-between sm:items-start sm:space-y-0 mb-2">
        <div class="flex-1 min-w-0">
          <h5 class="text-xl font-bold leading-tight text-gray-900 dark:text-white mb-1">Category Overview</h5>
          <p class="text-sm font-normal text-gray-500 dark:text-gray-400">Hours spent per category</p>
        </div>
        <div class="flex items-center flex-shrink-0">
          <span class="bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-1 rounded-md dark:bg-purple-900 dark:text-purple-300">
            <%= @category_data.length %> categories tracked
          </span>
        </div>
      </div>
      
      <!-- Column Chart Container -->
      <div id="category-column-chart" class="py-6"></div>
      
      <!-- Category Insights -->
      <div class="border-gray-200 border-t dark:border-gray-700 pt-4">
        <div class="h-32 flex items-center">
          <div class="grid grid-cols-2 gap-4 text-center w-full">
            <div>
              <dt class="text-base font-normal text-gray-500 dark:text-gray-400 pb-1">Most Used</dt>
              <dd class="leading-tight text-lg font-bold text-green-600 dark:text-green-400">
                <% most_category = @category_data&.max_by { |cat| cat[:hours] } %>
                <% if most_category %>
                  <%= most_category[:name] %> - <%= most_category[:hours] %>h
                <% else %>
                  No data available
                <% end %>
              </dd>
            </div>
            <div>
              <dt class="text-base font-normal text-gray-500 dark:text-gray-400 pb-1">Least Used</dt>
              <dd class="leading-tight text-lg font-bold text-blue-600 dark:text-blue-400">
                <% least_category = @category_data&.min_by { |cat| cat[:hours] } %>
                <% if least_category %>
                  <%= least_category[:name] %> - <%= least_category[:hours] %>h
                <% else %>
                  No data available
                <% end %>
              </dd>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Top Categories Horizontal Bar Chart -->
    <div class="bg-white rounded-lg dark:bg-gray-800 p-4 md:p-6 border border-gray-200 dark:border-gray-700">
      <div class="flex flex-col space-y-2 sm:flex-row sm:justify-between sm:items-start sm:space-y-0 mb-2">
        <div class="flex-1 min-w-0">
          <h5 class="text-xl font-bold leading-tight text-gray-900 dark:text-white mb-1">Top Categories</h5>
          <p class="text-sm font-normal text-gray-500 dark:text-gray-400">Most time-intensive activities</p>
        </div>
        <div class="flex items-center flex-shrink-0">
          <span class="bg-orange-100 text-orange-800 text-xs font-medium px-2.5 py-1 rounded-md dark:bg-orange-900 dark:text-orange-300">
            Top <%= @top_categories.length %> categories
          </span>
        </div>
      </div>
      
      <!-- Horizontal Bar Chart Container -->
      <div id="top-categories-chart" class="py-6"></div>
      
      <!-- Category Rankings -->
      <div class="border-gray-200 border-t dark:border-gray-700 pt-4">
        <div class="h-32 overflow-y-auto custom-scrollbar">
          <div class="space-y-2">
            <% @top_categories.each_with_index do |category, index| %>
              <div class="flex items-center justify-between">
                <div class="flex items-center">
                  <div class="flex items-center justify-center w-6 h-6 bg-gray-100 dark:bg-gray-700 rounded-full mr-3">
                    <span class="text-xs font-medium text-gray-600 dark:text-gray-300"><%= index + 1 %></span>
                  </div>
                  <span class="text-sm font-medium text-gray-900 dark:text-white"><%= category[:name] %></span>
                </div>
                <div class="flex items-center space-x-2 mr-4">
                  <span class="text-sm font-bold text-blue-600 dark:text-blue-400"><%= category[:formatted] %></span>
                  <div class="w-16 bg-gray-200 rounded-full h-2 dark:bg-gray-700">
                    <div class="bg-blue-600 h-2 rounded-full" style="width: <%= (category[:hours] / @top_categories.first[:hours] * 100).round %>%"></div>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Pass data to JavaScript -->
<script>
  window.dashboardData = {
    categoryData: <%= raw @category_data.to_json %>,
    dailyData: <%= raw @daily_data.to_json %>,
    categoryOverviewData: <%= raw @category_overview_data.to_json %>,
    topCategories: <%= raw @top_categories.to_json %>
  };

  document.addEventListener('DOMContentLoaded', function() {
    // Quick filter functionality
    const quickFilterButtons = document.querySelectorAll('.quick-filter-btn');
    const startDatePicker = document.getElementById('start-datepicker');
    const endDatePicker = document.getElementById('end-datepicker');
    const applyFilterButton = document.getElementById('apply-filter');

    // Get user's timezone information
    const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    console.log('User timezone:', userTimezone);

    // Function to format date as YYYY-MM-DD in local timezone
    function formatDateLocal(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }

    // Function to get current date/time in user's timezone
    function getTodayInTimezone() {
      const now = new Date();
      // Create a new date object that represents "today" in the user's local timezone
      return new Date(now.getFullYear(), now.getMonth(), now.getDate());
    }

    // Function to get date ranges
    function getDateRange(period) {
      const today = getTodayInTimezone();
      let startDate, endDate;

      console.log('Calculating date range for:', period, 'Today is:', formatDateLocal(today));

      switch (period) {
        case 'this-week':
          // Get start of current week (Monday)
          const currentDay = today.getDay(); // 0 = Sunday, 1 = Monday, etc.
          const daysFromMonday = currentDay === 0 ? 6 : currentDay - 1; // If Sunday, go back 6 days
          startDate = new Date(today);
          startDate.setDate(today.getDate() - daysFromMonday);
          
          // Get end of current week (Friday)
          endDate = new Date(startDate);
          endDate.setDate(startDate.getDate() + 4);
          break;
          
        case 'last-week':
          // Get start of last week (Monday)
          const todayDay = today.getDay();
          const daysToLastMonday = todayDay === 0 ? 13 : todayDay + 6; // If Sunday, go back 13 days, else current day + 6
          startDate = new Date(today);
          startDate.setDate(today.getDate() - daysToLastMonday);
          
          // Get end of last week (Friday)
          endDate = new Date(startDate);
          endDate.setDate(startDate.getDate() + 4);
          break;
          
        case 'this-month':
          // First day of current month
          startDate = new Date(today.getFullYear(), today.getMonth(), 1);
          // Last day of current month
          endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
          break;
          
        case 'last-month':
          // First day of last month
          startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
          // Last day of last month
          endDate = new Date(today.getFullYear(), today.getMonth(), 0);
          break;
          
        default:
          return { start: null, end: null };
      }

      const result = {
        start: formatDateLocal(startDate),
        end: formatDateLocal(endDate)
      };

      console.log('Date range result:', result);
      return result;
    }

    // Function to update active button state
    function updateActiveButton(activeButton) {
      quickFilterButtons.forEach(btn => {
        btn.classList.remove('bg-blue-600', 'text-white', 'border-blue-600');
        btn.classList.add('bg-white', 'text-gray-700', 'border-gray-300');
        btn.classList.add('dark:bg-gray-800', 'dark:text-gray-300', 'dark:border-gray-600');
      });
      
      if (activeButton) {
        activeButton.classList.remove('bg-white', 'text-gray-700', 'border-gray-300');
        activeButton.classList.remove('dark:bg-gray-800', 'dark:text-gray-300', 'dark:border-gray-600');
        activeButton.classList.add('bg-blue-600', 'text-white', 'border-blue-600');
      }
    }

    // Quick filter button click handlers
    quickFilterButtons.forEach(button => {
      button.addEventListener('click', function() {
        const period = this.dataset.period;
        const dateRange = getDateRange(period);
        
        if (dateRange.start && dateRange.end) {
          startDatePicker.value = dateRange.start;
          endDatePicker.value = dateRange.end;
          updateActiveButton(this);
          
          // Automatically apply the filter
          applyFilterButton.click();
        }
      });
    });

    // Reset active button when manual date changes occur
    [startDatePicker, endDatePicker].forEach(input => {
      input.addEventListener('change', function() {
        updateActiveButton(null);
      });
    });

    // Apply filter functionality (if not already implemented)
    if (applyFilterButton) {
      applyFilterButton.addEventListener('click', function() {
        const startDate = startDatePicker.value;
        const endDate = endDatePicker.value;
        
        if (startDate && endDate) {
          const url = new URL(window.location);
          url.searchParams.set('start_date', startDate);
          url.searchParams.set('end_date', endDate);
          window.location.href = url.toString();
        }
      });
    }
  });
</script>